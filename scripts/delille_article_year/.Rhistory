currencyCon <- function(x, from = "USD", to = "EUR"){
# assign values: 1 usd in each currency
values <- c(1.000000, 0.945799, 0.831797, 130.411928, 0.934267)
# names attribute
names(values) <- c("USD", "EUR", "GBP", "YEN", "CHF")
# calculate (convert from into USD, and divide to)
values[to] / (values[from] / x)
}
# Testing
currencyCon(1, "USD", "EUR")
currencyCon(1, "EUR", "EUR")
currencyCon(1, "GBP", "YEN")
currencyCon(100, "CHF", "USD")
conv_rate <- 0.945799
text <- c("Ha! let me see her; out, alas! She's cold:
Her blood is settled, and her joints are stiff,
Life and these lips have long been separated:
Death lies on her like an untimely frost
Upon the sweetest flower of all the field.")
f_words <- str_extract_all(text, "\\bf\\w+\\b")
l_words <- str_extract_all(text, "\\bl\\w+\\b")
f_words
# Find all words starting with letter 'l'
l_words <- str_extract_all(text, "\\bl\\w+\\b")
l_words
print("Hello, world!")
print("Hello, world!")
print("Hello, world!")
print("Hello, world!")
print("Hello, world!")
for (i in 1:5) {
print("Hello, world!")
}
miles_to_km <- function(miles){
return(miles*1.60934)
}
miles = 100
miles_to_km(100)
distance <- miles_to_km(20)
print(distance)
library(ggplot2)
df <- read.csv("view_election.csv")
df <- read.csv("cc_exercise/view_election.csv")
names(df)
table(df$country_name)
df <- df[df$country_name=="Switzerland",]
range(df$election_date)
x <- df[df$election_date >= "2019-01-01",] # nur die letzte Wahl
ggplot(x[x$seats>1,], aes(x=party_name_short, y=seats, fill=party_name_short)) + geom_col() +
labs(x="",
y="Sitze im Parlament",
title="Nationalratswahl 2019")
ggplot(x[x$seats>1,], aes(x=party_name_short, y=seats, fill=party_name_short)) + geom_col(show.legend = F) + theme_minimal() +
labs(x="",
y="Sitze im Parlament",
title="Nationalratswahl 2019")
ggplot(x[x$seats>1,], aes(x=party_name_short, y=seats, fill=party_name_short)) + geom_col(show.legend = F) + theme_minimal() +
scale_fill_manual(values = c("yellow","khaki1","royalblue","darkseagreen","chartreuse","orange","red","green4")) +
labs(x="",
y="Sitze im Parlament",
title="Nationalratswahl 2019")
ggplot(x[x$seats>1,], aes(x=reorder(party_name_short, -seats), y=seats, fill=party_name_short)) + geom_col(show.legend = F) + theme_minimal() +
scale_fill_manual(values = c("yellow","khaki1","royalblue","darkseagreen","chartreuse","orange","red","green4")) +
labs(x="",
y="Sitze im Parlament",
title="Nationalratswahl 2019")
library(rvest)
library(tidyverse)
url <- "https://www.admin.ch/gov/de/start/dokumentation/reden/neujahrsansprachen.html"
page <- read_html(url)
page
# /html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]/article/ul/li[1]/a
# Above is the XPath to the first speech
page_href <- html_nodes(page,
xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]/article/ul/li[*]/a') %>%
html_attr('href')
page_href
urlone <- paste0("https://www.admin.ch", page_href[1])
urlone
one_speech <- read_html(urlone) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]') %>%
html_text()
one_speech
length(page_href)
df1 <- data.frame()
for (i in c(1:47)) {
url_one <- paste0("https://www.admin.ch", page_href[i])
message(url_one)
text <- read_html(url_one) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]') %>%
html_text()
tmp_df <- data.frame(url = page_href[i], text = text)
df1 <- bind_rows(df1, tmp_df)
}
df1 <- data.frame()
for (i in c(1:9)) {
url_one <- paste0("https://www.admin.ch", page_href[i])
message(url_one)
text <- read_html(url_one) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]') %>%
html_text()
tmp_df <- data.frame(url = page_href[i], text = text)
df1 <- bind_rows(df1, tmp_df)
}
df2 <- data.frame()
for (i in c(10:48)) {
url_one <- paste0("https://www.admin.ch", page_href[i])
message(url_one)
text <- read_html(url_one) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[3]') %>%
html_text()
tmp_df <- data.frame(url = page_href[i], text = text)
df2 <- bind_rows(df2, tmp_df)
}
url <- "https://www.admin.ch/gov/de/start/dokumentation/reden/neujahrsansprachen.html"
page <- read_html(url)
page
# /html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]/article/ul/li[1]/a
# Above is the XPath to the first speech
page_href <- html_nodes(page,
xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]/article/ul/li[*]/a') %>%
html_attr('href')
page_href
urlone <- paste0("https://www.admin.ch", page_href[1])
urlone
one_speech <- read_html(urlone) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]') %>%
html_text()
one_speech
length(page_href)
df1 <- data.frame()
for (i in c(1:47)) {
url_one <- paste0("https://www.admin.ch", page_href[i])
message(url_one)
text <- read_html(url_one) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]') %>%
html_text()
tmp_df <- data.frame(url = page_href[i], text = text)
df1 <- bind_rows(df1, tmp_df)
}
rsconnect::setAccountInfo(name='anthea92',
token='3D34A6CF4833F8E1D4A765CB5EFAAB1F',
secret='EZf8E5fKFfOPdMUkyawbEVIbOFAZfpg6leU62KMY')
rsconnect::deployApp('/Users/antheaalberto/Documents/GitHub/delille_viz/scripts/delille_article_year/app.R')
rsconnect::deployApp('/Users/antheaalberto/Documents/GitHub/delille_viz/scripts/delille_article_year')
## Marchal project ##
#### Setting up all the necessary dataframes ###
###### 0. Preparation ########
list.of.packages <- c("ggplot2", "rjson", "dplyr", "tidyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## the three lines above whether the necessary packages are installed; and if they are not, they will be installed
## the four lines below LOAD the necessary packages
library(ggplot2)
library(rjson)
library(dplyr)
library(tidyr)
rm(list=ls()) # cleans the environment to make everything a bit less busy
# I generally prefer to work with "standard" data frames instead of lists
# So chapters 1-4 (amend that) will read the json in form of a list and then transform them into a data frame
# The logic is essentially the same for every separate data frame
###### 1. citations-per-verse.json ######
cite_verse <- fromJSON(file="citations-per-verse.json") # read data
setwd("")
setwd("/Users/antheaalberto/Documents/GitHub/delille_viz/data")
## Marchal project ##
#### Setting up all the necessary dataframes ###
###### 0. Preparation ########
list.of.packages <- c("ggplot2", "rjson", "dplyr", "tidyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
## the three lines above whether the necessary packages are installed; and if they are not, they will be installed
## the four lines below LOAD the necessary packages
library(ggplot2)
library(rjson)
library(dplyr)
library(tidyr)
rm(list=ls()) # cleans the environment to make everything a bit less busy
# I generally prefer to work with "standard" data frames instead of lists
# So chapters 1-4 (amend that) will read the json in form of a list and then transform them into a data frame
# The logic is essentially the same for every separate data frame
###### 1. citations-per-verse.json ######
cite_verse <- fromJSON(file="citations-per-verse.json") # read data
cite_verse_df <- tibble(verse = character(),
citations = character()) # create empty data frame
# Then we have a so-called "for-loop" go through the list annd fill the empty data frame
for (i in 1:length(cite_verse$results$bindings)) {
number <- cite_verse$results$bindings[[i]]$verseOrdinalNumeral$value
citation <- cite_verse$results$bindings[[i]]$citationCount$value
cite_verse_df[i,1] <- number
cite_verse_df[i,2] <- citation
}
# Right now, verse and citation are stored as character strings, but re-coding them to be numbers makes more sense for our purposes
# Since the first command messes with the structure somewhat, we'll turn everything back into a proper df with the second command
cite_verse_df <- sapply(cite_verse_df,as.numeric)
cite_verse_df <- as.data.frame(cite_verse_df)
###### 2. citations-per-verse-per-year.json ######
cite_verse_year <- fromJSON(file="citations-per-verse-per-year.json")
cite_year_df <- tibble(verse = character(),
year = character(),
citations = character())
for (i in 1:length(cite_verse_year$results$bindings)) {
number <- cite_verse_year$results$bindings[[i]]$verseOrdinalNumeral$value
year <- cite_verse_year$results$bindings[[i]]$citationYear$value
citation <- cite_verse_year$results$bindings[[i]]$numberOfCitationsPerYear$value
cite_year_df[i,1] <- number
cite_year_df[i,2] <- year
cite_year_df[i,3] <- citation
}
cite_year_df <- sapply(cite_year_df,as.numeric)
cite_year_df <- as.data.frame(cite_year_df)
cite_year_df <-
cite_year_df %>%
group_by(verse) %>%
arrange(year)
##### 3. citations-per-verse-per-period.json #####
cite_verse_period <- fromJSON(file="citations-per-verse-per-period.json")
cite_period_df <- tibble(verse = character(),
cite_before1800 = character(),
cite_1800_05 = character(),
cite_1806_13 = character(),
cite_1814_50 = character(),
cite_after = character())
for (i in 1:length(cite_verse_period$results$bindings)) {
number <- cite_verse_period$results$bindings[[i]]$verseOrdinalNumeral$value
citation1 <- cite_verse_period$results$bindings[[i]]$publicationBefore1800Count$value
citation2 <- cite_verse_period$results$bindings[[i]]$publication1800_05Count$value
citation3 <- cite_verse_period$results$bindings[[i]]$publication1806_13Count$value
citation4 <- cite_verse_period$results$bindings[[i]]$publication1814_50Count$value
citation5 <- cite_verse_period$results$bindings[[i]]$publicationAfter1850Count$value
cite_period_df[i,1] <- number
cite_period_df[i,2] <- citation1
cite_period_df[i,3] <- citation2
cite_period_df[i,4] <- citation3
cite_period_df[i,5] <- citation4
cite_period_df[i,6] <- citation5
}
cite_period_df <- sapply(cite_period_df,as.numeric)
cite_period_df <- as.data.frame(cite_period_df)
# to make the visualization easier to create, we'll transform the df from wide to long
long_period <- cite_period_df %>% gather(period, citations, -c(verse))
long_period$period <- factor(long_period$period, levels = c("cite_before1800", "cite_1800_05", "cite_1806_13", "cite_1814_50", "cite_after"))
##### 4. citations-per-verse-per-citer-type_count.json #####
citers <- fromJSON(file="citations-per-verse-per-citer-type_count.json")
names(citers$results$bindings[[1]])
citer_df <- tibble(verse = character(),
man_of_letters = character(),
vulgarizer = character(),
artist = character(),
others = character(),
all = character())
for (i in 1:length(citers$results$bindings)) {
number <- citers$results$bindings[[i]]$verseOrdinalNumeral$value
man_of_letters <- citers$results$bindings[[i]]$manOfLettersCount$value
vulgarizer <- citers$results$bindings[[i]]$vulgarizerCount$value
artist <- citers$results$bindings[[i]]$artistCount$value
others <- citers$results$bindings[[i]]$otherRoleCount$value
all <- citers$results$bindings[[i]]$allRoles$value
citer_df[i,1] <- number
citer_df[i,2] <- man_of_letters
citer_df[i,3] <- vulgarizer
citer_df[i,4] <- artist
citer_df[i,5] <- others
citer_df[i,6] <- all
}
citer_df <- sapply(citer_df,as.numeric)
citer_df <- as.data.frame(citer_df)
long_citer <- citer_df %>% gather(citer, citations, -c(verse))
long_citer <- long_citer[long_citer$citer!="all",]
long_citer$citer <- as.factor(long_citer$citer)
levels(long_citer$citer)
long_citer$citer <- factor(long_citer$citer, levels=c("others", "artist", "vulgarizer", "man_of_letters"))
#### 5. citations-per-article-type-per-year_count ######
cite_art_yr <- fromJSON(file="citations-per-article-type-per-year_count.json")
names(cite_art_yr$results$bindings[[1]])
cite_art_yr_df <- tibble(year = character(),
translationArticle = character(),
literaryPedagogicArticle = character(),
literaryNewsArticle = character(),
hDCReviewArticle = character(),
hDCTranslationReviewArticle = character(),
otherDelilleExpressionReviewArticle = character(),
poemOrVersePlayArticle = character(),
novelArticle = character(),
literaryNonfictionArticle = character(),
essayOrPanoramicOrPhilosophicOrHumanitiesArticle = character(),
literaryScientificArticle = character(),
literaryArticle = character(),
scientificOrVulgarizedArticle = character(),
allCitingArticle = character())
for (i in 1:length(cite_art_yr$results$bindings)) {
number <- cite_art_yr$results$bindings[[i]]$citationYear$value
citation1 <- cite_art_yr$results$bindings[[i]]$translationArticleCount$value
citation2 <- cite_art_yr$results$bindings[[i]]$literaryPedagogicArticleCount$value
citation3 <- cite_art_yr$results$bindings[[i]]$literaryNewsArticleCount$value
citation4 <- cite_art_yr$results$bindings[[i]]$hDCReviewArticleCount$value
citation5 <- cite_art_yr$results$bindings[[i]]$hDCTranslationReviewArticleCount$value
citation6 <- cite_art_yr$results$bindings[[i]]$otherDelilleExpressionReviewArticleCount$value
citation7 <- cite_art_yr$results$bindings[[i]]$poemOrVersePlayArticleCount$value
citation8 <- cite_art_yr$results$bindings[[i]]$novelArticleCount$value
citation9 <- cite_art_yr$results$bindings[[i]]$literaryNonfictionArticleCount$value
citation10 <- cite_art_yr$results$bindings[[i]]$essayOrPanoramicOrPhilosophicOrHumanitiesArticleCount$value
citation11 <- cite_art_yr$results$bindings[[i]]$literaryScientificArticleCount$value
citation12 <- cite_art_yr$results$bindings[[i]]$literaryArticleCount$value
citation13 <- cite_art_yr$results$bindings[[i]]$scientificOrVulgarizedArticleCount$value
citation14 <- cite_art_yr$results$bindings[[i]]$allCitingArticle$value
cite_art_yr_df[i,1] <- number
cite_art_yr_df[i,2] <- citation1
cite_art_yr_df[i,3] <- citation2
cite_art_yr_df[i,4] <- citation3
cite_art_yr_df[i,5] <- citation4
cite_art_yr_df[i,6] <- citation5
cite_art_yr_df[i,7] <- citation6
cite_art_yr_df[i,8] <- citation7
cite_art_yr_df[i,9] <- citation8
cite_art_yr_df[i,10] <- citation9
cite_art_yr_df[i,11] <- citation10
cite_art_yr_df[i,12] <- citation11
cite_art_yr_df[i,13] <- citation12
cite_art_yr_df[i,14] <- citation13
cite_art_yr_df[i,15] <- citation14
}
cite_art_yr_df <- sapply(cite_art_yr_df,as.numeric)
cite_art_yr_df <- as.data.frame(cite_art_yr_df)
long_art_yr <- cite_art_yr_df %>% gather(article, citations, -c(year))
long_art_yr <- long_art_yr[long_art_yr$article!="allCitingArticle",]
long_art_yr <- long_art_yr[long_art_yr$article!="literaryArticle",] # I am not sure about this? But the numbers don't add up otherwise
long_art_yr$article <- as.factor(long_art_yr$article)
##### Save data frames #####
setwd("/Users/antheaalberto/Desktop/RISE/Marchal")
save(cite_art_yr_df, file = "cite_art_yr_df.Rda")
shiny::runApp('~/Documents/GitHub/delille_viz/scripts/delille_article_year')
rsconnect::deployApp('/Users/antheaalberto/Documents/GitHub/delille_viz/scripts/delille_article_year')
rsconnect::deployApp('/Users/antheaalberto/Documents/GitHub/delille_viz/scripts/delille_article_year')
rsconnect::deployApp('/Users/antheaalberto/Documents/GitHub/delille_viz/scripts/delille_article_year')
rsconnect::deployApp('/Users/antheaalberto/Documents/GitHub/delille_viz/scripts/delille_article_year')
rsconnect::deployApp('/Users/antheaalberto/Documents/GitHub/delille_viz/scripts/delille_article_year')
rsconnect::deployApp('/Users/antheaalberto/Documents/GitHub/delille_viz/scripts/delille_article_year')
View(cite_art_yr_df)
runApp('~/Documents/GitHub/delille_viz/scripts/delille_article_year')
runApp('~/Documents/GitHub/delille_viz/scripts/delille_article_year')
getwd()
setwd("/Users/antheaalberto/Documents/GitHub/delille_viz/scripts/delille_article_year")
save(long_art_yr, file = "long_art_yr.Rda")
runApp()
load("long_art_yr.Rda")
runApp()
rsconnect::deployApp('/Users/antheaalberto/Documents/GitHub/delille_viz/scripts/delille_article_year')
library(rvest)
library(tidyverse)
url <- "https://www.admin.ch/gov/de/start/dokumentation/reden/neujahrsansprachen.html"
page <- read_html(url)
page
# /html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]/article/ul/li[1]/a
# Above is the XPath to the first speech
page_href <- html_nodes(page,
xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]/article/ul/li[*]/a') %>%
html_attr('href')
page_href
urlone <- paste0("https://www.admin.ch", page_href[1])
urlone
one_speech <- read_html(urlone) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]') %>%
html_text()
one_speech
length(page_href)
df1 <- data.frame()
for (i in c(1:47)) {
url_one <- paste0("https://www.admin.ch", page_href[i])
message(url_one)
text <- read_html(url_one) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]') %>%
html_text()
tmp_df <- data.frame(url = page_href[i], text = text)
df1 <- bind_rows(df1, tmp_df)
}
View(df1)
df1 <- data.frame()
for (i in c(1:9)) {
url_one <- paste0("https://www.admin.ch", page_href[i])
message(url_one)
text <- read_html(url_one) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]') %>%
html_text()
tmp_df <- data.frame(url = page_href[i], text = text)
df1 <- bind_rows(df1, tmp_df)
}
df2 <- data.frame()
for (i in c(10:47)) {
url_one <- paste0("https://www.admin.ch", page_href[i])
message(url_one)
text <- read_html(url_one) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[3]') %>%
html_text()
tmp_df <- data.frame(url = page_href[i], text = text)
df2 <- bind_rows(df2, tmp_df)
}
df <- rbind(df1, df2)
View(df)
View(df)
df1 <- data.frame()
for (i in c(1:8)) {
url_one <- paste0("https://www.admin.ch", page_href[i])
message(url_one)
text <- read_html(url_one) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]') %>%
html_text()
tmp_df <- data.frame(url = page_href[i], text = text)
df1 <- bind_rows(df1, tmp_df)
}
df2 <- data.frame()
for (i in c(9:47)) {
url_one <- paste0("https://www.admin.ch", page_href[i])
message(url_one)
text <- read_html(url_one) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[3]') %>%
html_text()
tmp_df <- data.frame(url = page_href[i], text = text)
df2 <- bind_rows(df2, tmp_df)
}
df <- rbind(df1, df2)
View(df)
url <- "https://www.admin.ch/gov/de/start/dokumentation/reden/neujahrsansprachen.html"
announce_page <- read_html(url)
announce_page
# /html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]/article/ul/li[1]/a
# Above is the XPath to the first speech
# Now we can collect them all
announce_page_href <- html_nodes(announce_page,
xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]/article/ul/li[*]/a') %>%
html_attr('href')
announce_page_href
# We will try to scrape the text of only the most recent speech first
url_one <- paste0("https://www.admin.ch", announce_page_href[1]) # create the URL
url_one
# Where is the text stored?
# /html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]
one_speech <- read_html(url_one) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]') %>%
html_text()
one_speech
# We can see that it works, so we can do this for all the speeches
length(announce_page_href)
all_texts1 <- data.frame()
all_texts1 <- data.frame()
for (i in c(1:47)) {
url_one <- paste0("https://www.admin.ch", announce_page_href[i])
message(url_one)
text <- read_html(url_one) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]') %>%
html_text()
tmp_df <- data.frame(url = announce_page_href[i], text = text)
all_texts1 <- bind_rows(all_texts1, tmp_df)
}
# Did it work?
View(all_texts1)
all_texts1 <- data.frame()
for (i in c(1:8)) {
url_one <- paste0("https://www.admin.ch", announce_page_href[i])
message(url_one)
text <- read_html(url_one) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]') %>%
html_text()
tmp_df <- data.frame(url = announce_page_href[i], text = text)
all_texts1 <- bind_rows(all_texts1, tmp_df)
}
all_texts2 <- data.frame()
for (i in c(9:47)) {
url_one <- paste0("https://www.admin.ch", announce_page_href[i])
message(url_one)
text <- read_html(url_one) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[3]') %>%
html_text()
tmp_df <- data.frame(url = announce_page_href[i], text = text)
all_texts2 <- bind_rows(all_texts2, tmp_df)
}
all_texts <- rbind(all_texts1, all_texts2)
View(all_texts)
library(rvest)
library(tidyverse)
url <- "https://www.admin.ch/gov/de/start/dokumentation/reden/neujahrsansprachen.html"
announce_page <- read_html(url)
announce_page
#### 1. Collect URLs for speeches ####
announce_page_href <- html_nodes(announce_page,
xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]/article/ul/li[*]/a') %>%
html_attr('href')
announce_page_href
#### 2. Go to each link and scrape text of speech ####
all_texts1 <- data.frame()
for (i in c(1:8)) {
url_one <- paste0("https://www.admin.ch", announce_page_href[i])
message(url_one)
text <- read_html(url_one) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[4]') %>%
html_text()
tmp_df <- data.frame(url = announce_page_href[i], text = text)
all_texts1 <- bind_rows(all_texts1, tmp_df)
}
all_texts2 <- data.frame()
for (i in c(9:47)) {
url_one <- paste0("https://www.admin.ch", announce_page_href[i])
message(url_one)
text <- read_html(url_one) %>%
html_nodes(xpath = '/html/body/div[2]/div[3]/div/div[2]/div/div[1]/div[3]') %>%
html_text()
tmp_df <- data.frame(url = announce_page_href[i], text = text)
all_texts2 <- bind_rows(all_texts2, tmp_df)
}
## Merge the two data frames just created
all_texts <- rbind(all_texts1, all_texts2)
View(all_texts)
